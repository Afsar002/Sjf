#include <stdio.h>

struct Process
{
    int pid,arrival_time,burst_time,completion_time,waiting_time,turnaround_time;
};
void sortprocess(struct Process processes[],int n)
{
    for (int i = 0; i < n; i++)
    {
        for (int j = i + 1; j < n; j++)
        {
            if (processes[i].burst_time > processes[j].burst_time)
            {
                struct Process temp = processes[i];
                processes[i] = processes[j];
                processes[j] = temp;
            }
        }
    }
}
void sjf(struct Process processes[], int n)
{
    sortprocess(processes, n);
    processes[0].waiting_time = 0;
    processes[0].turnaround_time = 0;
    
    int current_time=0;
     float avgwaiting_time = 0.0, avgturnaround_time = 0.0;
    for (int i = 0; i < n; i++)
    {   processes[i+1].completion_time = current_time + processes[i].burst_time;
    processes[i].turnaround_time = processes[i+1].completion_time - processes[i].arrival_time;
    processes[i].waiting_time = processes[i].turnaround_time - processes[i].burst_time;
    current_time = processes[i+1].completion_time;
    avgwaiting_time += processes[i].waiting_time;
    avgturnaround_time += processes[i].turnaround_time;
    }
     avgwaiting_time = avgwaiting_time / n;
  avgturnaround_time = avgturnaround_time / n;

    printf("Process\tArrival Time\tBurst Time\tTurnaround Time\t\tWaiting Time\n");

    for (int i=0; i < n; i++)
    {
        printf("%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].pid, processes[i].arrival_time, processes[i].burst_time, processes[i].turnaround_time, processes[i].waiting_time);
    }
      printf("Average Turnaround_time=%f\n\nAverage Waiting Time=%f", avgturnaround_time, avgwaiting_time);
}

int main()
{
    int n;
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];

    for (int i = 0; i < n; i++)
    {
        processes[i].pid = i + 1;
        printf("Enter arrival time for process %d: ", i + 1);
        scanf("%d",&processes[i].arrival_time);
        printf("Enter burst time for process %d: ", i + 1);
        scanf("%d",&processes[i].burst_time);
    }

    sjf(processes,n);

    return 0;
}
